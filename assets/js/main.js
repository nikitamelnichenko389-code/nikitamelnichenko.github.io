// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª JavaScript
class FenomenVernostiApp {
    constructor() {
        this.currentTheme = 'light';
        this.currentSection = 'about';
        this.isMenuOpen = false;
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.restoreUserPreferences();
        this.setupScrollProgress();
        console.log('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "–§–µ–Ω–æ–º–µ–Ω –≤–µ—Ä–Ω–æ—Å—Ç–∏" –∑–∞–ø—É—â–µ–Ω–æ');
    }

    setupEventListeners() {
        // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        this.setupSmoothScroll();
        
        // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
        this.setupMobileMenu();
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
        this.setupThemeSwitcher();
        
        // –ü–æ–∏—Å–∫
        this.setupSearch();
        
        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.setupModals();
        
        // –¢–µ—Å—Ç
        this.setupTest();
        
        // –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        this.setupContactForm();
    }

    // === –ü–õ–ê–í–ù–ê–Ø –ü–†–û–ö–†–£–¢–ö–ê ===
    setupSmoothScroll() {
        const links = document.querySelectorAll('a[href^="#"]');
        
        links.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const targetId = link.getAttribute('href').substring(1);
                this.scrollToSection(targetId);
            });
        });
    }

    scrollToSection(sectionId) {
        const element = document.getElementById(sectionId);
        if (element) {
            const headerHeight = document.querySelector('header').offsetHeight;
            const targetPosition = element.offsetTop - headerHeight - 20;
            
            window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
            });

            this.currentSection = sectionId;
            this.updateActiveNavLink(sectionId);
        }
    }

    updateActiveNavLink(activeId) {
        document.querySelectorAll('nav a').forEach(link => {
            link.classList.remove('active');
        });

        const activeLink = document.querySelector(`nav a[href="#${activeId}"]`);
        if (activeLink) {
            activeLink.classList.add('active');
        }
    }

    // === –ú–û–ë–ò–õ–¨–ù–û–ï –ú–ï–ù–Æ ===
    setupMobileMenu() {
        const burger = document.querySelector('.burger-menu');
        const nav = document.querySelector('nav');
        
        if (burger && nav) {
            burger.addEventListener('click', () => {
                this.toggleMobileMenu();
            });

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
            nav.addEventListener('click', (e) => {
                if (e.target.tagName === 'A') {
                    this.closeMobileMenu();
                }
            });
        }
    }

    toggleMobileMenu() {
        const burger = document.querySelector('.burger-menu');
        const nav = document.querySelector('nav');
        
        this.isMenuOpen = !this.isMenuOpen;
        burger.classList.toggle('active');
        nav.classList.toggle('active');
    }

    closeMobileMenu() {
        const burger = document.querySelector('.burger-menu');
        const nav = document.querySelector('nav');
        
        this.isMenuOpen = false;
        burger.classList.remove('active');
        nav.classList.remove('active');
    }

    // === –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –¢–ï–ú–´ ===
    setupThemeSwitcher() {
        const themeSwitcher = document.querySelector('.theme-switcher-header');
        
        if (themeSwitcher) {
            themeSwitcher.addEventListener('click', () => {
                this.toggleTheme();
            });
        }
    }

    toggleTheme() {
        this.currentTheme = this.currentTheme === 'light' ? 'dark' : 'light';
        document.body.setAttribute('data-theme', this.currentTheme);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        localStorage.setItem('theme', this.currentTheme);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
        this.updateThemeIcon();
        
        this.showNotification(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${this.currentTheme === 'dark' ? '—Ç—ë–º–Ω—É—é' : '—Å–≤–µ—Ç–ª—É—é'}`, 'info');
    }

    updateThemeIcon() {
        const themeIcon = document.querySelector('.theme-icon');
        if (themeIcon) {
            themeIcon.textContent = this.currentTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        }
    }

    // === –ü–û–ò–°–ö –ü–û –°–ê–ô–¢–£ ===
    setupSearch() {
        const searchInput = document.getElementById('searchInput');
        const searchResults = document.getElementById('searchResults');
        
        if (searchInput && searchResults) {
            searchInput.addEventListener('input', (e) => {
                const query = e.target.value.trim();
                
                if (query.length > 2) {
                    this.performSearch(query);
                } else {
                    searchResults.style.display = 'none';
                }
            });
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–∏—Å–∫–∞
            document.addEventListener('click', (e) => {
                if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
                    searchResults.style.display = 'none';
                }
            });
        }
    }

    performSearch(query) {
        const searchResults = document.getElementById('searchResults');
        const results = this.searchContent(query);
        
        if (results.length > 0) {
            searchResults.innerHTML = results.map(result => `
                <div class="search-result-item" onclick="app.selectSearchResult('${result.id}')">
                    <strong>${result.title}</strong>
                    <p>${result.preview}</p>
                </div>
            `).join('');
            searchResults.style.display = 'block';
        } else {
            searchResults.innerHTML = '<div class="search-result-item">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>';
            searchResults.style.display = 'block';
        }
    }

    searchContent(query) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        return [
            {
                id: 'about',
                title: '–û –ø—Ä–æ–µ–∫—Ç–µ',
                preview: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤ –î–æ–Ω–±–∞—Å—Å–∞'
            },
            {
                id: 'heroes',
                title: '–ì–µ—Ä–æ–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
                preview: '–ú–æ—Ç–æ—Ä–æ–ª–∞, –ì–∏–≤–∏, –ó–∞—Ö–∞—Ä—á–µ–Ω–∫–æ'
            }
        ].filter(item => 
            item.title.toLowerCase().includes(query.toLowerCase()) ||
            item.preview.toLowerCase().includes(query.toLowerCase())
        );
    }

    selectSearchResult(sectionId) {
        this.scrollToSection(sectionId);
        document.getElementById('searchResults').style.display = 'none';
        document.getElementById('searchInput').value = '';
    }

    // === –ü–†–û–ì–†–ï–°–° –ß–¢–ï–ù–ò–Ø ===
    setupScrollProgress() {
        const progressElement = document.getElementById('readingProgress');
        const progressFill = document.getElementById('progressFill');
        const progressText = document.getElementById('progressText');
        
        if (progressElement && progressFill && progressText) {
            window.addEventListener('scroll', () => {
                const windowHeight = window.innerHeight;
                const documentHeight = document.documentElement.scrollHeight;
                const scrollTop = window.pageYOffset;
                
                const progress = (scrollTop / (documentHeight - windowHeight)) * 100;
                const roundedProgress = Math.round(progress);
                
                progressFill.style.width = `${progress}%`;
                progressText.textContent = `–ü—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è: ${roundedProgress}%`;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if (scrollTop > 200) {
                    progressElement.classList.add('active');
                } else {
                    progressElement.classList.remove('active');
                }
            });
        }
    }

    // === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===
    setupModals() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                this.closeModal(e.target.id);
            }
        });
        
        // ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeAllModals();
            }
        });
    }

    openModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = 'block';
            document.body.style.overflow = 'hidden';
        }
    }

    closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    }

    closeAllModals() {
        document.querySelectorAll('.modal').forEach(modal => {
            modal.style.display = 'none';
        });
        document.body.style.overflow = 'auto';
    }

    // === –ì–ï–†–û–ò ===
    showHeroDetail(heroId) {
        const heroes = {
            zaharchenko: {
                name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ó–∞—Ö–∞—Ä—á–µ–Ω–∫–æ',
                bio: '–ü–µ—Ä–≤—ã–π –≥–ª–∞–≤–∞ –î–ù–†...',
                // –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            },
            motorola: {
                name: '–ê—Ä—Å–µ–Ω –ü–∞–≤–ª–æ–≤ "–ú–æ—Ç–æ—Ä–æ–ª–∞"',
                bio: '–ö–æ–º–∞–Ω–¥–∏—Ä, –∫–æ—Ç–æ—Ä—ã–π —à—ë–ª –ø–µ—Ä–≤—ã–º...',
            },
            givi: {
                name: '–ú–∏—Ö–∞–∏–ª –¢–æ–ª—Å—Ç—ã—Ö "–ì–∏–≤–∏"',
                bio: '–®–∞—Ö—Ç—ë—Ä, —Å—Ç–∞–≤—à–∏–π —Å–∏–º–≤–æ–ª–æ–º...',
            }
        };
        
        const hero = heroes[heroId];
        if (hero) {
            const modalBody = document.getElementById('heroBody');
            modalBody.innerHTML = `
                <h2>${hero.name}</h2>
                <p>${hero.bio}</p>
                <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç -->
            `;
            this.openModal('heroModal');
        }
    }

    // === –¢–ï–°–¢ ===
    setupTest() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
        window.startTest = () => {
            document.getElementById('testStart').style.display = 'none';
            document.getElementById('testQuestions').style.display = 'block';
            this.loadTestQuestions();
        };
    }

    loadTestQuestions() {
        const questions = [
            {
                question: "–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ –≤ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?",
                answers: [
                    "–í–µ—Ä–Ω–æ—Å—Ç—å —Å–≤–æ–∏–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º",
                    "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ª—å–∑–∞",
                    "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –±–ª–∏–∑–∫–∏—Ö",
                    "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å"
                ]
            },
            // –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤...
        ];
        
        const container = document.getElementById('testQuestions');
        container.innerHTML = questions.map((q, index) => `
            <div class="question">
                <h3>–í–æ–ø—Ä–æ—Å ${index + 1}</h3>
                <p>${q.question}</p>
                <div class="answers">
                    ${q.answers.map((answer, ansIndex) => `
                        <div class="answer" onclick="app.selectAnswer(${index}, ${ansIndex})">
                            ${answer}
                        </div>
                    `).join('')}
                </div>
            </div>
        `).join('') + '<button onclick="app.finishTest()" class="button primary">–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç</button>';
    }

    selectAnswer(questionIndex, answerIndex) {
        const answers = document.querySelectorAll(`.question:nth-child(${questionIndex + 1}) .answer`);
        answers.forEach((answer, index) => {
            answer.classList.toggle('selected', index === answerIndex);
        });
    }

    finishTest() {
        // –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        document.getElementById('testQuestions').style.display = 'none';
        document.getElementById('testResult').style.display = 'block';
        
        document.getElementById('testResult').innerHTML = `
            <h3>–í–∞—à —Ü–µ–Ω–Ω–æ—Å—Ç–Ω—ã–π –∫–æ–¥</h3>
            <p>–í—ã - —á–µ–ª–æ–≤–µ–∫ –≤–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –¥–æ–ª–≥–∞!</p>
            <button onclick="app.restartTest()" class="button primary">–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑</button>
        `;
    }

    restartTest() {
        document.getElementById('testResult').style.display = 'none';
        document.getElementById('testStart').style.display = 'block';
    }

    // === –§–û–†–ú–ê –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò ===
    setupContactForm() {
        const form = document.getElementById('feedbackForm');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleFormSubmit(form);
            });
        }
    }

    handleFormSubmit(form) {
        const formData = new FormData(form);
        const data = {
            name: formData.get('name'),
            email: formData.get('email'),
            message: formData.get('message')
        };
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!data.name || !data.email || !data.message) {
            this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
            return;
        }
        
        if (!this.isValidEmail(data.email)) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email', 'error');
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã (–∑–∞–≥–ª—É—à–∫–∞)
        this.showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
        form.reset();
    }

    isValidEmail(email) {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
    }

    // === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
    showNotification(message, type = 'info') {
        const notification = document.getElementById('notification');
        if (notification) {
            notification.textContent = message;
            notification.className = `notification ${type}`;
            notification.style.display = 'block';
            
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }
    }

    // === –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö ===
    restoreUserPreferences() {
        // –¢–µ–º–∞
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            this.currentTheme = savedTheme;
            document.body.setAttribute('data-theme', this.currentTheme);
            this.updateThemeIcon();
        }
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∞ –∏ —Ç.–¥.
    }

    // === –≠–ö–°–ü–û–†–¢ –ò –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
    exportToPDF() {
        this.showNotification('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–∫–æ—Ä–æ!', 'info');
    }

    startAudioBook() {
        this.showNotification('–ê—É–¥–∏–æ–∫–Ω–∏–≥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–∫–æ—Ä–æ!', 'info');
    }

    shareQuote(index) {
        const quotes = [
            "–ú—ã —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–π –≤—ã–±–æ—Ä. –ò –Ω–∞–∑–∞–¥ –¥–æ—Ä–æ–≥–∏ –Ω–µ—Ç.",
            "–ù–∞ –≤–æ–π–Ω–µ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–æ–º–Ω–µ–Ω–∏—è. –†–µ—à–∏–ª ‚Äî –¥–µ–ª–∞–π.",
            "–ú—ã –Ω–µ –Ω–∞—ë–º–Ω–∏–∫–∏. –ú—ã –∑–∞—â–∏—â–∞–µ–º —Å–≤–æ–∏ –¥–æ–º–∞."
        ];
        
        if (navigator.share) {
            navigator.share({
                title: '–¶–∏—Ç–∞—Ç–∞',
                text: quotes[index]
            });
        } else {
            // Fallback –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä
            navigator.clipboard.writeText(quotes[index]);
            this.showNotification('–¶–∏—Ç–∞—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä!', 'success');
        }
    }

    addToFavorites(index) {
        const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
        favorites.push(index);
        localStorage.setItem('favorites', JSON.stringify(favorites));
        this.showNotification('–¶–∏—Ç–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!', 'success');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new FenomenVernostiApp();

// –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –≤ HTML
window.app = app;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML –∞—Ç—Ä–∏–±—É—Ç–æ–≤
window.toggleTheme = () => app.toggleTheme();
window.toggleMenu = () => app.toggleMobileMenu();
window.showHeroDetail = (heroId) => app.showHeroDetail(heroId);
window.shareQuote = (index) => app.shareQuote(index);
window.addToFavorites = (index) => app.addToFavorites(index);
window.exportToPDF = () => app.exportToPDF();
window.startAudioBook = () => app.startAudioBook();
window.startTest = () => app.startTest();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
});
